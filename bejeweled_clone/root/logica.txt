Rappresentazione griglia:
[['o', 'c', 'r', 'v', 'v', 'p', 'y', 'g'],
 ['p', 'o', 'r', 'p', 'b', 'p', 'c', 'b'],
 ['v', 'o', 'y', 'g', 'c', 'y', 'g', 'y'],
 ['y', 'b', 'b', 'p', 'y', 'g', 'p', 'c'],
 ['y', 'c', 'v', 'v', 'r', 'y', 'r', 'o'],
 ['p', 'c', 'y', 'p', 'o', 'c', 'v', 'y'],
 ['r', 'g', 'b', 'r', 'c', 'r', 'g', 'y'],
 ['o', 'v', 'b', 'v', 'r', 'r', 'g', 'b']]

Rappresentazione target da individuare totale: 16


Match orizzontali: 4

XX.X  ....  X.XX  .... (tradotto sarebbe, nel primo caso arr[0][0]==arr[0][1]==arr[0][3])
....  ....  ....  ....
....  ....  ....  ....
....  XX.X  ....  X.XX


Match verticali: 4

X...  ...X  X...  ...X (tradotto sarebbe, nel primo caso arr[0][0]==arr[2][0]==arr[3][0])
X...  ...X  ....  ....
....  ....  X...  ...X
X...  ...X  X...  ...X


Match su due righe: 8

X...  ....  ...X  ....  .XX.  ....  .XX.  .... (tradotto sarebbe, nel pimo caso arr[0][0]==arr[1][1]==arr[1][2])
.XX.  ....  .XX.  ....  X...  ....  ...X  ....
....  X...  ....  ...X  ....  .XX.  ....  .XX.
....  .XX.  ....  .XX.  ....  X...  ....  ...X


Ciclo:
for i in range (5):
	for j in range (5):
		16 if ?????

Qual è il sistema più efficiente per trovare un pattern inteso come un array 2D in un array 2D?